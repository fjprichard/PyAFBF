{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "\n# Multifractional Brownian field\n\n.. codeauthor:: Fr\u00e9d\u00e9ric Richard <frederic.richard_at_univ-amu.fr>\n\nIn this example, we show how to simulate heterogeneous textures whose\nroughness spatially varies. Such textures can be obtained by simulating a\nturning band field with a space-dependent Hurst function.\n\nHere, the Hurst function is defined at position\n$(x, y)$ by the constant function\n\n\\begin{align}\\beta_{(x,y)}(w) \\equiv H_y = \\left(\\frac{y}{N}\\right) h_0\n        + \\left(\\frac{N-y}{N}\\right) h_1,\\end{align}\n\nfor some fixed values $h_0, h_1$. This leads to a texture whose\nroughness linearly varies in the vertical direction. Such a simulation\nwas used for illustration and experiments in :cite:p:`Vu2020`.\n\n<div class=\"alert alert-info\"><h4>Note</h4><p>Such simulations are related to the so-called\n  **multifractional Brownian field**\n  which was defined :cite:p:`Benassi97,Peltier96`. In a harmonizable\n  representation, these fields are of the form\n\n  .. math::\n      Z(x, y) = C_{x, y} \\int_{\\mathbb{R}^2}\n      ( e^{i\\langle (x, y), w \\rangle} -1 )\n      \\vert w \\vert^{-H_{x, y} -1}\n      dW(w),\n\n  where $dW$ stands for a complex Brownian measure.</p></div>\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "import numpy as np\nfrom afbf import coordinates, sdata, tbfield\n\nN = 256  # Image size.\nh0 = 0.1  # Hurst index at (x, y) with y=0.\nh1 = 0.9  # Hurst index at (x, y) with y=N-1.\n\n# Define a fractional Brownian field.\nZ = tbfield()\n\n# Set coordinates.\ncoord = coordinates(N)  # field coordinates.\ncoordy = coordinates()  # subset of coordinates.\nx = np.reshape(np.arange(1, N+1), (N, 1))\n\n# Initialize an image.\nz = sdata(coord)\nz.name = 'Multifractional Brownian field'\n\nfor y in range(N):\n    # Set the Hurst index at local value h.\n    t = y / (N - 1)\n    h = h0 * (1 - t) + h1 * t\n    # Change values of the topothesy and Hurst functions.\n    Z.hurst.ChangeParameters(np.array([h]))  # Change the Hurst index.\n    # Normalization.\n    Z.NormalizeModel()\n\n    # Restrict to coordinates (:, y).\n    coordy.DefineNonUniformLocations(\n        np.concatenate((x, (y+1) * np.ones((N, 1))), axis=1))\n    coordy.N = coord.N\n\n    # Simulate the current field keeping a same random seed.\n    np.random.seed(1)\n    zy = Z.Simulate(coordy)\n\n    # Keep the simulation at positions  (y, :).\n    z.values.reshape(z.M)[y, :] = zy.values.reshape(1, N)[0, 0:N]\n\n# Display the simulation.\nz.Display()"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.13"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}